{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "example-complex",
  "type": "registry:block",
  "title": "Example Complex",
  "description": "复杂的 Pokemon 展示组件，包含数据获取和多个子组件",
  "registryDependencies": [
    "card"
  ],
  "files": [
    {
      "path": "registry/new-york/blocks/example-complex/page.tsx",
      "content": "\"use client\";\n\nimport { PokemonCard } from \"@/registry/new-york/blocks/example-complex/components/pokemon-card\";\nimport \"./page.css\";\nimport { useEffect, useState } from \"react\";\nimport { getPokemonList } from \"@/registry/new-york/blocks/example-complex/lib/pokemon\";\n\nexport default function ExampleComplex() {\n  const [pokemonNames, setPokemonNames] = useState<string[]>([]);\n\n  useEffect(() => {\n    async function fetchPokemonNames() {\n      const pokemonList = await getPokemonList({ limit: 12 });\n      if (pokemonList) {\n        setPokemonNames(pokemonList.results.map((p) => p.name));\n      }\n    }\n    fetchPokemonNames();\n  }, []);\n\n  return (\n    <div className=\"mx-auto w-4xl px-4\">\n      <div className=\"grid grid-cols-2 gap-4 py-10 sm:grid-cols-3 md:grid-cols-4\">\n        {pokemonNames.map((name) => (\n          <PokemonCard key={name} name={name} />\n        ))}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:page",
      "target": "app/demo-pokemon/index.tsx"
    },
    {
      "path": "registry/new-york/blocks/example-complex/page.css",
      "content": ".abc {\n  color: red;\n}\n",
      "type": "registry:page",
      "target": "app/demo-pokemon/index.css"
    },
    {
      "path": "registry/new-york/blocks/example-complex/components/pokemon-card.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { getPokemon } from \"@/registry/new-york/blocks/example-complex/lib/pokemon\";\nimport { Card, CardContent } from \"@/registry/new-york/ui/card\";\nimport { PokemonImage } from \"@/registry/new-york/blocks/example-complex/components/pokemon-image\";\n\ninterface Pokemon {\n  name: string;\n  id: number;\n}\n\nexport function PokemonCard({ name }: { name: string }) {\n  const [pokemon, setPokemon] = useState<Pokemon | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    async function fetchPokemon() {\n      try {\n        const data = await getPokemon(name);\n        setPokemon(data);\n      } catch (error) {\n        console.error(\"Failed to fetch pokemon:\", error);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchPokemon();\n  }, [name]);\n\n  if (loading) {\n    return (\n      <Card>\n        <CardContent className=\"flex flex-col items-center p-2\">\n          <div className=\"animate-pulse bg-gray-200 w-20 h-20 rounded\"></div>\n          <div className=\"animate-pulse bg-gray-200 w-16 h-4 rounded mt-2\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!pokemon) {\n    return null;\n  }\n\n  return (\n    <Card>\n      <CardContent className=\"flex flex-col items-center p-2\">\n        <div>\n          <PokemonImage name={pokemon.name} number={pokemon.id} />\n        </div>\n        <div className=\"text-center font-medium\">{pokemon.name}</div>\n      </CardContent>\n    </Card>\n  );\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/example-complex/components/pokemon-image.tsx",
      "content": "import { usePokemonImage } from \"@/registry/new-york/blocks/example-complex/hooks/use-pokemon\";\n\nexport function PokemonImage({\n  name,\n  number,\n}: {\n  name: string;\n  number: number;\n}) {\n  const imageUrl = usePokemonImage(number);\n\n  if (!imageUrl) {\n    return null;\n  }\n\n  return <img src={imageUrl} alt={name} />;\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/new-york/blocks/example-complex/hooks/use-pokemon.ts",
      "content": "// Totally unnecessary hook, but it's a good example of how to use a hook in a custom registry.\nexport function usePokemonImage(number: number) {\n  return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${number}.png`;\n}\n",
      "type": "registry:hook"
    },
    {
      "path": "registry/new-york/blocks/example-complex/lib/pokemon.ts",
      "content": "import { z } from \"zod\";\n\nexport async function getPokemonList({ limit = 10 }: { limit?: number }) {\n  try {\n    const response = await fetch(\n      `https://pokeapi.co/api/v2/pokemon?limit=${limit}`\n    );\n    return z\n      .object({\n        results: z.array(z.object({ name: z.string() })),\n      })\n      .parse(await response.json());\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\nexport async function getPokemon(name: string) {\n  try {\n    const response = await fetch(`https://pokeapi.co/api/v2/pokemon/${name}`);\n\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch pokemon\");\n    }\n\n    return z\n      .object({\n        name: z.string(),\n        id: z.number(),\n        sprites: z.object({\n          front_default: z.string(),\n        }),\n        stats: z.array(\n          z.object({\n            base_stat: z.number(),\n            stat: z.object({\n              name: z.string(),\n            }),\n          })\n        ),\n      })\n      .parse(await response.json());\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n",
      "type": "registry:lib"
    }
  ]
}